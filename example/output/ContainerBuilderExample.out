Try to build container, in the first build, an exception will be thrown since we add a compiler directive
which detects duplicate service id's

OK EXCEPTION: Service id "LDL.example.application.admin" was already defined in file "/home/ldl/projects/ldl-container-builder/example/Build/Application/Admin/services.xml", and redefined in file: "/home/ldl/projects/ldl-container-builder/example/Build/Application/User/services.xml")Try to build container again, this time, without duplicate service id detection

Found service file /home/ldl/projects/ldl-container-builder/example/Build/Application/Admin/services.xml
Found service file /home/ldl/projects/ldl-container-builder/example/Build/Application/User/services.xml
Found service file /home/ldl/projects/ldl-container-builder/example/Build/Framework/Services/Mailer/services.xml
Found service file /home/ldl/projects/ldl-container-builder/example/Build/Framework/Services/Template/services.xml
Found compiler pass file /home/ldl/projects/ldl-container-builder/example/Build/Framework/Application/ApplicationCompilerPass.php
<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ProjectServiceContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'LDL.example.application.admin' => 'getLDL_Example_Application_AdminService',
            'LDL.example.application.user' => 'getLDL_Example_Application_UserService',
            'LDL.example.service.mailer' => 'getLDL_Example_Service_MailerService',
            'LDL.example.service.template' => 'getLDL_Example_Service_TemplateService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Psr\\Container\\ContainerInterface' => true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
        ];
    }

    /**
     * Gets the public 'LDL.example.application.admin' shared service.
     *
     * @return \LDL\Example\Build\Application\Admin\Application
     */
    protected function getLDL_Example_Application_AdminService($lazyLoad = true)
    {
        return $this->services['LDL.example.application.admin'] = new \LDL\Example\Build\Application\Admin\Application('admin');
    }

    /**
     * Gets the public 'LDL.example.application.user' shared service.
     *
     * @return \LDL\Example\Build\Application\User\Application
     */
    protected function getLDL_Example_Application_UserService($lazyLoad = true)
    {
        return $this->services['LDL.example.application.user'] = new \LDL\Example\Build\Application\User\Application('user');
    }

    /**
     * Gets the public 'LDL.example.service.mailer' shared service.
     *
     * @return \LDL\Example\Build\Framework\Services\Mailer\MailerService
     */
    protected function getLDL_Example_Service_MailerService($lazyLoad = true)
    {
        return $this->services['LDL.example.service.mailer'] = new \LDL\Example\Build\Framework\Services\Mailer\MailerService(($this->services['LDL.example.service.template'] ?? $this->getLDL_Example_Service_TemplateService()));
    }

    /**
     * Gets the public 'LDL.example.service.template' shared service.
     *
     * @return \LDL\Example\Build\Framework\Services\Template\TemplateService
     */
    protected function getLDL_Example_Service_TemplateService($lazyLoad = true)
    {
        return $this->services['LDL.example.service.template'] = new \LDL\Example\Build\Framework\Services\Template\TemplateService();
    }
}
